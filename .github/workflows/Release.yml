name: Release Mod

on:
  workflow_dispatch:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
    - '*' # Push events with tag

env:
     module_id: QuestSounds
     BSVersion: 1.19.0
     bs_hook: 3_4_4
     codegen: 0_18_2
     ndkname: android-ndk-r23

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
      name: Checkout
      with:
        submodules: true
        lfs: true

    #- name: Install Powershell
    #  run: sudo apt-get install -y powershell

    - name: Get the tag name
      run: echo "VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV

    #- name: Cache Android NDK
    #  id: cache-ndk
    #  uses: actions/cache@v2
    #  env:
    #    cache-name: cache-ndk
    #  with:
    #    path: ndk
    #    key: ${{ runner.os }}-${{ env.cache-name }}-${{ env.ndkname }}
    #    restore-keys: |
    #      ${{ runner.os }}-${{ env.cache-name }}-${{ env.ndkname }}
    
    #- name: Install Android NDK
    #  if: steps.cache-ndk.outputs.cache-hit != 'true'
    #  run: |
    #    wget -q -O ndk.zip https://dl.google.com/android/repository/${ndkname}-linux-x86_64.zip
    #    unzip -q ndk.zip
    #    mv ${ndkname} ndk
      
    #- name: Create ndkpath.txt
    #  run: |
    #    cd ndk
    #    pwd > ${GITHUB_WORKSPACE}/ndkpath.txt

    - name: Create ndkpath.txt
      run: |
        echo "$ANDROID_NDK_LATEST_HOME" > ${GITHUB_WORKSPACE}/ndkpath.txt

    - name: Get QPM
      if: steps.cache-qpm.outputs.cache-hit != 'true'
      uses: dawidd6/action-download-artifact@v2
      with:
        github_token: ${{secrets.GITHUB_TOKEN}}
        workflow: main.yml
        name: QPM-ubuntu-x64
        path: QPM
        repo: sc2ad/QuestPackageManager
      
    - name: QPM Dependencies Cache
      id: cache-qpm-deps
      uses: actions/cache@v2
      env:
        cache-name: cache-qpm-deps
      with:
        path: QPM_Temp
        key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('qpm.json', '.github/Release.yml') }}
        restore-keys: |
          ${{ runner.os }}-${{ env.cache-name }}-
          ${{ runner.os }}-${{ env.cache-name }}
      
    - name: QPM Restore
      run: |
        chmod +x ./QPM/QPM
        ./QPM/QPM restore

    - name: Check dependency Folders
      run: |
        echo "Checking extern Folder"
        ls -lh ${GITHUB_WORKSPACE}/extern/
        echo ""
        echo "Checking QPM_Temp Folders"
        ls -lh QPM_Temp/
        echo ""
        echo "Listing beatsaber-hook folder"
        ls QPM_Temp/beatsaber-hook/
        echo ""
        echo "Listing all .so files in QPM_Temp"
        find QPM_Temp -type f -name "*.so"

    - name: Build
      run: |
        cd ${GITHUB_WORKSPACE}
        pwsh -Command ./build.ps1 --actions
    - name: Get Library Name
      id: libname
      run: |
        cd ./libs/arm64-v8a/
        pattern="lib${module_id}*.so"
        files=( $pattern )
        echo ::set-output name=NAME::"${files[0]}"
    - name: Package QMOD
      run: |
        cd ${GITHUB_WORKSPACE}
        pwsh -Command ./buildQMOD.ps1 --package
    - name: Release
      uses: softprops/action-gh-release@v1
      with:
          name: ${{ env.module_id }} ${{ env.VERSION }} for Beat Saber ${{ env.BSVersion }}
          files: |
            Examples/FNF-SoundPack/FNF-SoundPack.qmod
            Examples/Bandoot-SoundPack.qmod
            Examples/Osu-SoundPack.qmod
            ./${{ env.module_id }}.qmod
          body_path: ./rl-notes.md
          draft: true

    #- name: Create Release
    #  id: create_release
    #  uses: actions/create-release@v1
    #  env:
    #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #  with:
    #    tag_name: ${{ github.ref }}
    #    release_name: ${{ env.module_id }} ${{ github.ref }} for Beat Saber ${{ env.BSVersion }}
    #    body_path: ./rl-notes.md
    #    draft: true
    #    prerelease: false
    #- name: Upload QMOD Release Asset
    #  id: upload-release-QMOD 
    #  uses: actions/upload-release-asset@v1
    #  env:
    #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #  with:
    #    upload_url: ${{ steps.create_release.outputs.upload_url }}
    #    asset_path: ./${{ env.module_id }}.qmod
    #    asset_name: ${{ env.module_id }}.qmod
    #    asset_content_type: application/qmod